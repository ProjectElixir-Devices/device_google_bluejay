From 45844c90282b2085d7ce617de97ce623031f1001 Mon Sep 17 00:00:00 2001
From: Sam Mortimer <sam@mortimer.me.uk>
Date: Tue, 26 May 2020 20:53:59 -0700
Subject: [PATCH 1/2] Settings: Add support for allowing/disallowing apps on
 restricted networks

*) Add option to disable all network traffic
   in app data usage settings.

*) Disable the existing background data and unrestricted
   data usage options when all network traffic is
   disabled.

Change-Id: I0aaf5703d6dd5d6e6ec3cda3940f28833fe052ea
Signed-off-by: Mohammad Hasan Keramat J <ikeramat@protonmail.com>
---
 res/values/custom_strings.xml                 |  4 ++
 res/xml/app_data_usage.xml                    |  5 ++
 .../settings/datausage/AppDataUsage.java      | 51 ++++++++++++++-----
 3 files changed, 48 insertions(+), 12 deletions(-)

diff --git a/res/values/custom_strings.xml b/res/values/custom_strings.xml
index 36ed053cbc..e2b7a1fffa 100644
--- a/res/values/custom_strings.xml
+++ b/res/values/custom_strings.xml
@@ -117,6 +117,10 @@
     <string name="swipe_to_screenshot_title">Swipe to screenshot</string>
     <string name="swipe_to_screenshot_summary">Swipe 3 fingers down the screen to take a screenshot</string>
 
+    <!-- Per-app data restrictions -->
+    <string name="data_usage_app_restrict_all">Allow network access</string>
+    <string name="data_usage_app_restrict_all_summary">Enable network usage</string>
+
     <!-- Scramble pin -->
     <string name="unlock_scramble_pin_layout_title">Scramble layout</string>
     <string name="unlock_scramble_pin_layout_summary">Scramble PIN layout when unlocking device</string>
diff --git a/res/xml/app_data_usage.xml b/res/xml/app_data_usage.xml
index aacc1f6027..cf805e2c37 100644
--- a/res/xml/app_data_usage.xml
+++ b/res/xml/app_data_usage.xml
@@ -58,6 +58,11 @@
             android:key="app_settings"
             android:title="@string/data_usage_app_settings" />
 
+        <com.android.settingslib.RestrictedSwitchPreference
+            android:key="restrict_all"
+            android:title="@string/data_usage_app_restrict_all"
+            android:summary="@string/data_usage_app_restrict_all_summary" />
+
         <com.android.settingslib.RestrictedSwitchPreference
             android:key="restrict_background"
             android:title="@string/data_usage_app_restrict_background"
diff --git a/src/com/android/settings/datausage/AppDataUsage.java b/src/com/android/settings/datausage/AppDataUsage.java
index e15ceade8d..046c758354 100644
--- a/src/com/android/settings/datausage/AppDataUsage.java
+++ b/src/com/android/settings/datausage/AppDataUsage.java
@@ -23,6 +23,7 @@ import android.content.Intent;
 import android.content.pm.ApplicationInfo;
 import android.content.pm.PackageManager;
 import android.graphics.drawable.Drawable;
+import android.net.ConnectivitySettingsManager;
 import android.net.NetworkTemplate;
 import android.os.Bundle;
 import android.os.Process;
@@ -58,6 +59,7 @@ import com.android.settingslib.net.UidDetailProvider;
 
 import java.util.ArrayList;
 import java.util.List;
+import java.util.Set;
 
 public class AppDataUsage extends DataUsageBaseFragment implements OnPreferenceChangeListener,
         DataSaverBackend.Listener {
@@ -73,6 +75,7 @@ public class AppDataUsage extends DataUsageBaseFragment implements OnPreferenceC
     private static final String KEY_FOREGROUND_USAGE = "foreground_usage";
     private static final String KEY_BACKGROUND_USAGE = "background_usage";
     private static final String KEY_APP_SETTINGS = "app_settings";
+    private static final String KEY_RESTRICT_ALL = "restrict_all";
     private static final String KEY_RESTRICT_BACKGROUND = "restrict_background";
     private static final String KEY_APP_LIST = "app_list";
     private static final String KEY_CYCLE = "cycle";
@@ -87,6 +90,7 @@ public class AppDataUsage extends DataUsageBaseFragment implements OnPreferenceC
     private Preference mForegroundUsage;
     private Preference mBackgroundUsage;
     private Preference mAppSettings;
+    private RestrictedSwitchPreference mRestrictAll;
     private RestrictedSwitchPreference mRestrictBackground;
     private PreferenceCategory mAppList;
 
@@ -171,6 +175,7 @@ public class AppDataUsage extends DataUsageBaseFragment implements OnPreferenceC
                 mIcon = uidDetail.icon;
                 mLabel = uidDetail.label;
                 removePreference(KEY_UNRESTRICTED_DATA);
+                removePreference(KEY_RESTRICT_ALL);
                 removePreference(KEY_RESTRICT_BACKGROUND);
             } else {
                 if (mPackages.size() != 0) {
@@ -183,6 +188,8 @@ public class AppDataUsage extends DataUsageBaseFragment implements OnPreferenceC
                     } catch (PackageManager.NameNotFoundException e) {
                     }
                 }
+                mRestrictAll = findPreference(KEY_RESTRICT_ALL);
+                mRestrictAll.setOnPreferenceChangeListener(this);
                 mRestrictBackground = findPreference(KEY_RESTRICT_BACKGROUND);
                 mRestrictBackground.setOnPreferenceChangeListener(this);
                 mUnrestrictedData = findPreference(KEY_UNRESTRICTED_DATA);
@@ -224,6 +231,7 @@ public class AppDataUsage extends DataUsageBaseFragment implements OnPreferenceC
 
             removePreference(KEY_UNRESTRICTED_DATA);
             removePreference(KEY_APP_SETTINGS);
+            removePreference(KEY_RESTRICT_ALL);
             removePreference(KEY_RESTRICT_BACKGROUND);
             removePreference(KEY_APP_LIST);
         }
@@ -266,6 +274,17 @@ public class AppDataUsage extends DataUsageBaseFragment implements OnPreferenceC
             mDataSaverBackend.setIsDenylisted(mAppItem.key, mPackageName, !(Boolean) newValue);
             updatePrefs();
             return true;
+        } else if (preference == mRestrictAll) {
+            Set<Integer> uids =
+                    ConnectivitySettingsManager.getUidsAllowedOnRestrictedNetworks(mContext);
+            if (!(Boolean) newValue) {
+                uids.remove(mAppItem.key);
+            } else {
+                uids.add(mAppItem.key);
+            }
+            ConnectivitySettingsManager.setUidsAllowedOnRestrictedNetworks(mContext, uids);
+            updatePrefs();
+            return true;
         } else if (preference == mUnrestrictedData) {
             mDataSaverBackend.setIsAllowlisted(mAppItem.key, mPackageName, (Boolean) newValue);
             return true;
@@ -296,7 +315,7 @@ public class AppDataUsage extends DataUsageBaseFragment implements OnPreferenceC
 
     @VisibleForTesting
     void updatePrefs() {
-        updatePrefs(getAppRestrictBackground(), getUnrestrictData());
+        updatePrefs(getAppRestrictBackground(), getUnrestrictData(), getAppRestrictAll());
     }
 
     @VisibleForTesting
@@ -332,25 +351,28 @@ public class AppDataUsage extends DataUsageBaseFragment implements OnPreferenceC
         }
     }
 
-    private void updatePrefs(boolean restrictBackground, boolean unrestrictData) {
+    private void updatePrefs(boolean restrictBackground, boolean unrestrictData,
+                boolean restrictAll) {
         if (!isSimHardwareVisible(mContext)) {
             return;
         }
         setBackPreferenceListAnimatorIfLoaded();
         final EnforcedAdmin admin = RestrictedLockUtilsInternal.checkIfMeteredDataRestricted(
                 mContext, mPackageName, UserHandle.getUserId(mAppItem.key));
+        if (mRestrictAll != null) {
+            mRestrictAll.setChecked(!restrictAll);
+        }
         if (mRestrictBackground != null) {
-            mRestrictBackground.setChecked(!restrictBackground);
             mRestrictBackground.setDisabledByAdmin(admin);
+            mRestrictBackground.setEnabled(!mRestrictBackground.isDisabledByAdmin() &&
+                    !restrictAll);
+            mRestrictBackground.setChecked(!restrictBackground && !restrictAll);
         }
         if (mUnrestrictedData != null) {
-            if (restrictBackground) {
-                mUnrestrictedData.setVisible(false);
-            } else {
-                mUnrestrictedData.setVisible(true);
-                mUnrestrictedData.setChecked(unrestrictData);
-                mUnrestrictedData.setDisabledByAdmin(admin);
-            }
+            mUnrestrictedData.setDisabledByAdmin(admin);
+            mUnrestrictedData.setEnabled(!mUnrestrictedData.isDisabledByAdmin() &&
+                    !restrictBackground && !restrictAll);
+            mUnrestrictedData.setChecked(unrestrictData && !restrictBackground && !restrictAll);
         }
     }
 
@@ -392,6 +414,11 @@ public class AppDataUsage extends DataUsageBaseFragment implements OnPreferenceC
         return (uidPolicy & POLICY_REJECT_METERED_BACKGROUND) != 0;
     }
 
+    private boolean getAppRestrictAll() {
+        return !ConnectivitySettingsManager.getUidsAllowedOnRestrictedNetworks(mContext)
+                .contains(mAppItem.key);
+    }
+
     private boolean getUnrestrictData() {
         if (mDataSaverBackend != null) {
             return mDataSaverBackend.isAllowlisted(mAppItem.key);
@@ -525,14 +552,14 @@ public class AppDataUsage extends DataUsageBaseFragment implements OnPreferenceC
     @Override
     public void onAllowlistStatusChanged(int uid, boolean isAllowlisted) {
         if (mAppItem.uids.get(uid, false)) {
-            updatePrefs(getAppRestrictBackground(), isAllowlisted);
+            updatePrefs(getAppRestrictBackground(), isAllowlisted, getAppRestrictAll());
         }
     }
 
     @Override
     public void onDenylistStatusChanged(int uid, boolean isDenylisted) {
         if (mAppItem.uids.get(uid, false)) {
-            updatePrefs(isDenylisted, getUnrestrictData());
+            updatePrefs(isDenylisted, getUnrestrictData(), getAppRestrictAll());
         }
     }
 }
-- 
2.41.0

