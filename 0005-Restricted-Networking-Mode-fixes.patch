From 3e83ac4475af3867113e169ad44b263558e27cc6 Mon Sep 17 00:00:00 2001
From: Oliver Scott <olivercscott@gmail.com>
Date: Thu, 14 Oct 2021 13:31:43 -0400
Subject: [PATCH 05/17] Restricted Networking Mode fixes

Insert added packages to restricted networking mode's allowlist

In restricted networking mode, added packages are restricted by default.
This change allows packages with INTERNET permission by default instead,
since only those need allowlisting.

Change-Id: I363c7062a8670c6a5270ac61a71e3197255d9b6c
(cherry picked from commit f0e16aac3e0e342ebb087d2469dc289f1ef050cf)

Insert/remove packages from new/deleted users to/from restricted networking mode's allowlist

In restricted networking mode, when a user is created, its packages are restricted by default.
This change allows packages with the INTERNET permission.
On the other hand, when a user is deleted, the UIDs are removed.

Test:
1. Create new user
2. adb shell settings get global uids_allowed_on_restricted_networks
3. Delete user
4. adb shell settings get global uids_allowed_on_restricted_networks

Change-Id: I5999e5ada12955a46b7e6797261c5ee3788c623d

restricted-networking: Always log newly installed apps being added to the allowlist

* This way we can try to track down rare issues noticed where
  sometimes an app didn't get added to the allowlist, or it got
  added when it shouldn't have.

Change-Id: Ib95f80918feb5db95766837e5708ad070f2d1070

restricted-networking: Always log UID removal

* Will help debug any issues that may or may not arise.

Change-Id: I40f0937b921a83dfdee14891b791a067ae463b95

restricted-networking: Only add newly installed apps to the allowlist, not upgrades

* Upgrading apps still sends PACKAGE_ADDED, since it's sent for
  "new package installs", which technically an upgrade still is.
* Check EXTRA_REPLACING to see if it's a new app.
* Avoids unconditionally turning on networking on app upgrade

Change-Id: Ie7a4090101d47c7033b7f41792e943129dba0700

Co-Authored-By: Chirayu Desai <chirayudesai1@gmail.com>
Change-Id: Ia3ec546747057301c65a792e0fabef4c45b4b5a4
Signed-off-by: Mohammad Hasan Keramat J <ikeramat@protonmail.com>
---
 .../net/NetworkPolicyManagerService.java      | 38 ++++++++++++++++++-
 1 file changed, 36 insertions(+), 2 deletions(-)

diff --git a/services/core/java/com/android/server/net/NetworkPolicyManagerService.java b/services/core/java/com/android/server/net/NetworkPolicyManagerService.java
index 103847e5..b28267d5 100644
--- a/services/core/java/com/android/server/net/NetworkPolicyManagerService.java
+++ b/services/core/java/com/android/server/net/NetworkPolicyManagerService.java
@@ -35,6 +35,7 @@ import static android.content.Intent.ACTION_PACKAGE_ADDED;
 import static android.content.Intent.ACTION_UID_REMOVED;
 import static android.content.Intent.ACTION_USER_ADDED;
 import static android.content.Intent.ACTION_USER_REMOVED;
+import static android.content.Intent.EXTRA_REPLACING;
 import static android.content.Intent.EXTRA_UID;
 import static android.content.pm.PackageManager.MATCH_ANY_USER;
 import static android.content.pm.PackageManager.MATCH_DIRECT_BOOT_AWARE;
@@ -164,6 +165,7 @@ import android.content.Intent;
 import android.content.IntentFilter;
 import android.content.pm.ApplicationInfo;
 import android.content.pm.IPackageManager;
+import android.content.pm.PackageInfo;
 import android.content.pm.PackageManager;
 import android.content.pm.PackageManager.NameNotFoundException;
 import android.content.pm.PackageManagerInternal;
@@ -296,6 +298,7 @@ import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.Executor;
 import java.util.concurrent.TimeUnit;
 import java.util.function.IntConsumer;
+import java.util.stream.Collectors;
 
 /**
  * Service that maintains low-level network policy rules, using
@@ -1207,12 +1210,25 @@ public class NetworkPolicyManagerService extends INetworkPolicyManager.Stub {
             final int uid = intent.getIntExtra(EXTRA_UID, -1);
             if (uid == -1) return;
 
+            if (intent.getBooleanExtra(EXTRA_REPLACING, false)) {
+                if (LOGV) Slog.v(TAG, "ACTION_PACKAGE_ADDED Not new app, skip it uid=" + uid);
+                return;
+            }
+
             if (ACTION_PACKAGE_ADDED.equals(action)) {
                 // update rules for UID, since it might be subject to
                 // global background data policy
-                if (LOGV) Slog.v(TAG, "ACTION_PACKAGE_ADDED for uid=" + uid);
                 // Clear the cache for the app
                 synchronized (mUidRulesFirstLock) {
+                    if (hasInternetPermissionUL(uid)) {
+                        Slog.i(TAG, "ACTION_PACKAGE_ADDED for uid=" + uid);
+                        Set<Integer> uids =
+                                ConnectivitySettingsManager.getUidsAllowedOnRestrictedNetworks(
+                                        context);
+                        uids.add(uid);
+                        ConnectivitySettingsManager.setUidsAllowedOnRestrictedNetworks(context,
+                                uids);
+                    }
                     mInternetPermissionMap.delete(uid);
                     updateRestrictionRulesForUidUL(uid);
                 }
@@ -1229,7 +1245,7 @@ public class NetworkPolicyManagerService extends INetworkPolicyManager.Stub {
             if (uid == -1) return;
 
             // remove any policy and update rules to clean up
-            if (LOGV) Slog.v(TAG, "ACTION_UID_REMOVED for uid=" + uid);
+            Slog.i(TAG, "ACTION_UID_REMOVED for uid=" + uid);
             synchronized (mUidRulesFirstLock) {
                 onUidDeletedUL(uid);
                 synchronized (mNetworkPoliciesSecondLock) {
@@ -1259,10 +1275,28 @@ public class NetworkPolicyManagerService extends INetworkPolicyManager.Stub {
                         // Removing outside removeUserStateUL since that can also be called when
                         // user resets app preferences.
                         mMeteredRestrictedUids.remove(userId);
+                        Set<Integer> uids =
+                                ConnectivitySettingsManager.getUidsAllowedOnRestrictedNetworks(
+                                        mContext);
                         if (action == ACTION_USER_ADDED) {
                             // Add apps that are allowed by default.
                             addDefaultRestrictBackgroundAllowlistUidsUL(userId);
+                            try {
+                                List<PackageInfo> packages = mIPm.getPackagesHoldingPermissions(
+                                        new String[]{Manifest.permission.INTERNET},
+                                        0, userId).getList();
+                                uids.addAll(packages.stream().map(packageInfo ->
+                                        packageInfo.applicationInfo.uid)
+                                                .collect(Collectors.toSet()));
+                            } catch (RemoteException ignored) {
+                            }
+                        } else {
+                            uids.removeAll(uids.stream().filter(uid ->
+                                    UserHandle.getUserId(uid) == userId)
+                                    .collect(Collectors.toSet()));
                         }
+                        ConnectivitySettingsManager.setUidsAllowedOnRestrictedNetworks(mContext,
+                                uids);
                         // Update global restrict for that user
                         synchronized (mNetworkPoliciesSecondLock) {
                             updateRulesForGlobalChangeAL(true);
-- 
2.41.0

