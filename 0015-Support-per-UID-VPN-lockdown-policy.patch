From a90401705c443ac694426ebde180aceee32de900 Mon Sep 17 00:00:00 2001
From: Tommy Webb <tommy@calyxinstitute.org>
Date: Wed, 22 Feb 2023 16:59:15 -0500
Subject: [PATCH 15/17] Support per-UID VPN lockdown policy

Tell Connectivity that UIDs matching the lockdown UID policy should
be included in lockdown.

Lockdown UID policy is defined as WIFI and CELLULAR access toggles
turned off while VPN access toggle is turned on.

Requires: Ia95724cd19040f83cea2c169a2585ab5dbdddbac
Change-Id: Ia76465734cf3455c1c42e4aeab392a5d62212396
Signed-off-by: Pranav Vashi <neobuddy89@gmail.com>
---
 .../android/net/NetworkPolicyManager.java     |  7 ++++
 .../net/NetworkPolicyManagerService.java      | 38 +++++++++++++++++++
 2 files changed, 45 insertions(+)

diff --git a/core/java/android/net/NetworkPolicyManager.java b/core/java/android/net/NetworkPolicyManager.java
index 3478d6e7..81602fdf 100644
--- a/core/java/android/net/NetworkPolicyManager.java
+++ b/core/java/android/net/NetworkPolicyManager.java
@@ -97,6 +97,13 @@ public class NetworkPolicyManager {
      */
     public static final int POLICY_REJECT_WIFI = 0x8000;
 
+    /** @hide */
+    public static final int POLICY_LOCKDOWN_VPN = POLICY_REJECT_WIFI | POLICY_REJECT_CELLULAR;
+
+    /** @hide */
+    public static final int POLICY_LOCKDOWN_VPN_MASK = POLICY_REJECT_WIFI | POLICY_REJECT_CELLULAR
+            | POLICY_REJECT_VPN;
+
     /*
      * Rules defining whether an uid has access to a network given its type (metered / non-metered).
      *
diff --git a/services/core/java/com/android/server/net/NetworkPolicyManagerService.java b/services/core/java/com/android/server/net/NetworkPolicyManagerService.java
index 4564b381..fd8e541e 100644
--- a/services/core/java/com/android/server/net/NetworkPolicyManagerService.java
+++ b/services/core/java/com/android/server/net/NetworkPolicyManagerService.java
@@ -89,6 +89,8 @@ import static android.net.NetworkPolicyManager.ALLOWED_REASON_TOP;
 import static android.net.NetworkPolicyManager.EXTRA_NETWORK_TEMPLATE;
 import static android.net.NetworkPolicyManager.FIREWALL_RULE_DEFAULT;
 import static android.net.NetworkPolicyManager.POLICY_ALLOW_METERED_BACKGROUND;
+import static android.net.NetworkPolicyManager.POLICY_LOCKDOWN_VPN;
+import static android.net.NetworkPolicyManager.POLICY_LOCKDOWN_VPN_MASK;
 import static android.net.NetworkPolicyManager.POLICY_NONE;
 import static android.net.NetworkPolicyManager.POLICY_REJECT_ALL;
 import static android.net.NetworkPolicyManager.POLICY_REJECT_CELLULAR;
@@ -1108,6 +1110,13 @@ public class NetworkPolicyManagerService extends INetworkPolicyManager.Stub {
             mConnManager.registerNetworkCallback(
                     new NetworkRequest.Builder().build(), mNetworkCallback);
 
+            // Set up the firewall for any persistent VPN lockdown UIDs.
+            try {
+                mConnManager.setRequireVpnForUids(true, getUidsWithLockdownPolicy());
+            } catch (RuntimeException e) {
+                Slog.wtf(TAG, "initService: setRequireVpnForUids failed", e);
+            }
+
             mAppStandby.addListener(new NetPolicyAppIdleStateChangeListener());
             synchronized (mUidRulesFirstLock) {
                 updateRulesForAppIdleParoleUL();
@@ -3120,9 +3129,38 @@ public class NetworkPolicyManagerService extends INetworkPolicyManager.Stub {
         }
     }
 
+    private static boolean isLockdownPolicy(final int policy) {
+        return (policy & POLICY_LOCKDOWN_VPN_MASK) == POLICY_LOCKDOWN_VPN;
+    }
+
+    @NonNull
+    private List<Range<Integer>> getUidsWithLockdownPolicy() {
+        var ranges = new ArrayList<Range<Integer>>();
+        synchronized (mUidRulesFirstLock) {
+            for (int i = 0; i < mUidPolicy.size(); i++) {
+                final int uid = mUidPolicy.keyAt(i);
+                final int uidPolicy = mUidPolicy.valueAt(i);
+                if (isLockdownPolicy(uidPolicy)) {
+                    ranges.add(new Range<>(uid, uid));
+                }
+            }
+        }
+        return ranges;
+    }
+
     @GuardedBy("mUidRulesFirstLock")
     private void setUidPolicyUncheckedUL(int uid, int oldPolicy, int policy, boolean persist) {
         setUidPolicyUncheckedUL(uid, policy, false);
+        final boolean wasLockdown = isLockdownPolicy(oldPolicy);
+        final boolean isLockdown = isLockdownPolicy(policy);
+        if (wasLockdown != isLockdown) {
+            try {
+                mConnManager.setRequireVpnForUids(isLockdown, List.of(new Range<>(uid, uid)));
+            } catch (RuntimeException e) {
+                Slog.wtf(TAG, "setUidPolicyUncheckedUL: Setting VPN " + (isLockdown ? "required "
+                        : "not required") + " failed for uid " + uid, e);
+            }
+        }
 
         final long lastAllowedTransportsPacked = getAllowedTransportsPackedForUidPolicy(oldPolicy);
         final long allowedTransportsPacked = getAllowedTransportsPackedForUidPolicy(policy);
-- 
2.41.0

