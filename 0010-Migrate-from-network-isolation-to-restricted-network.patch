From bfb07b29fbaec24ccf93b151f810f7acec2006b1 Mon Sep 17 00:00:00 2001
From: Oliver Scott <olivercscott@gmail.com>
Date: Fri, 26 Nov 2021 13:59:21 -0500
Subject: [PATCH 10/17] Migrate from network isolation to restricted networking
 mode

* Pre-12, we used to implement network-isolation with POLICY_REJECT_ALL
* Starting from 12, we've switched to AOSP's restricted-networking-mode
* Read uids which were isolated, and migrate them to restricted networking,
  for both upgrades (which may be from 11) and restores (same)
* Remove POLICY_REJECT_ALL for migrated uids to avoid future conflicts

Co-authored-by: Chirayu Desai <chirayudesai1@gmail.com>
Change-Id: I01d21abb9084eb1f61ccefd8a6da33e82697294e
Signed-off-by: Mohammad Hasan Keramat J <ikeramat@protonmail.com>
---
 .../net/NetworkPolicyManagerService.java      | 26 +++++++++++++++++++
 1 file changed, 26 insertions(+)

diff --git a/services/core/java/com/android/server/net/NetworkPolicyManagerService.java b/services/core/java/com/android/server/net/NetworkPolicyManagerService.java
index 083d9af4..e2a22231 100644
--- a/services/core/java/com/android/server/net/NetworkPolicyManagerService.java
+++ b/services/core/java/com/android/server/net/NetworkPolicyManagerService.java
@@ -89,6 +89,7 @@ import static android.net.NetworkPolicyManager.EXTRA_NETWORK_TEMPLATE;
 import static android.net.NetworkPolicyManager.FIREWALL_RULE_DEFAULT;
 import static android.net.NetworkPolicyManager.POLICY_ALLOW_METERED_BACKGROUND;
 import static android.net.NetworkPolicyManager.POLICY_NONE;
+import static android.net.NetworkPolicyManager.POLICY_REJECT_ALL;
 import static android.net.NetworkPolicyManager.POLICY_REJECT_CELLULAR;
 import static android.net.NetworkPolicyManager.POLICY_REJECT_METERED_BACKGROUND;
 import static android.net.NetworkPolicyManager.POLICY_REJECT_VPN;
@@ -2598,6 +2599,25 @@ public class NetworkPolicyManagerService extends INetworkPolicyManager.Stub {
         }
     }
 
+    private void migrateNetworkIsolation() {
+        // Get pre-12 network-isolation uids
+        final int[] uidsWithPolicy = getUidsWithPolicy(POLICY_REJECT_ALL);
+        final Set<Integer> uidsToDeny =
+                Arrays.stream(uidsWithPolicy).boxed().collect(Collectors.toSet());
+
+        // Remove the POLICY_REJECT_ALL uids from the allowlist
+        Set<Integer> uidsAllowedOnRestrictedNetworks =
+                ConnectivitySettingsManager.getUidsAllowedOnRestrictedNetworks(mContext);
+        uidsAllowedOnRestrictedNetworks.removeAll(uidsToDeny);
+        ConnectivitySettingsManager.setUidsAllowedOnRestrictedNetworks(mContext,
+                uidsAllowedOnRestrictedNetworks);
+
+        // Clear policy to avoid future conflicts
+        for (int uid : uidsToDeny) {
+            removeUidPolicy(uid, POLICY_REJECT_ALL);
+        }
+    }
+
     @GuardedBy({"mUidRulesFirstLock", "mNetworkPoliciesSecondLock"})
     private void readPolicyAL() {
         if (LOGV) Slog.v(TAG, "readPolicyAL()");
@@ -2620,6 +2640,9 @@ public class NetworkPolicyManagerService extends INetworkPolicyManager.Stub {
         } finally {
             IoUtils.closeQuietly(fis);
         }
+
+        // Migrate from pre-12 network-isolation to restricted-networking-mode
+        migrateNetworkIsolation();
     }
 
     private void readPolicyXml(InputStream inputStream, boolean forRestore, int userId)
@@ -3017,6 +3040,9 @@ public class NetworkPolicyManagerService extends INetworkPolicyManager.Stub {
         } catch (IOException | XmlPullParserException e) {
             Slog.w(TAG, "applyRestore: error reading payload for user " + user, e);
         }
+
+        // Migrate from pre-12 network-isolation to restricted-networking-mode
+        migrateNetworkIsolation();
     }
 
     @Override
-- 
2.41.0

